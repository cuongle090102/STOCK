#!/usr/bin/env python3
"""
Kafka Topics Setup Script for Vietnamese Algorithmic Trading System
Creates all necessary Kafka topics with proper configurations.
"""

import sys
import time
from typing import List, Dict, Any

try:
    from kafka.admin import KafkaAdminClient, NewTopic, ConfigResource, ConfigResourceType
    from kafka.errors import TopicAlreadyExistsError, KafkaError
except ImportError:
    print("❌ kafka-python not installed. Run: pip install kafka-python")
    sys.exit(1)


class KafkaTopicManager:
    """Manages Kafka topic creation and configuration."""
    
    def __init__(self, bootstrap_servers: List[str] = None):
        """Initialize Kafka topic manager."""
        self.bootstrap_servers = bootstrap_servers or ['localhost:9092']
        self.admin_client = None
        
    def connect(self) -> bool:
        """Connect to Kafka cluster."""
        try:
            self.admin_client = KafkaAdminClient(
                bootstrap_servers=self.bootstrap_servers,
                client_id='topic_setup_client'
            )
            print("✅ Connected to Kafka cluster")
            return True
        except Exception as e:
            print(f"❌ Failed to connect to Kafka: {e}")
            return False
    
    def create_vietnamese_market_topics(self) -> bool:
        """Create all topics for Vietnamese market data."""
        print("📊 Creating Vietnamese market data topics...")
        
        # Define topics with configurations optimized for Vietnamese market
        topics_config = [
            {
                'name': 'vn-market-ticks',
                'partitions': 12,  # High partitions for tick data volume
                'replication_factor': 1,  # Single node setup
                'config': {
                    'cleanup.policy': 'delete',
                    'retention.ms': str(3 * 24 * 60 * 60 * 1000),  # 3 days
                    'segment.ms': str(24 * 60 * 60 * 1000),  # 1 day segments
                    'compression.type': 'snappy',
                    'min.insync.replicas': '1',
                    'max.message.bytes': str(1024 * 1024),  # 1MB max message
                },
                'description': 'Real-time tick data from Vietnamese exchanges (HOSE, HNX, UPCOM)'
            },
            {
                'name': 'vn-market-bars',
                'partitions': 6,
                'replication_factor': 1,
                'config': {
                    'cleanup.policy': 'delete',
                    'retention.ms': str(7 * 24 * 60 * 60 * 1000),  # 7 days
                    'segment.ms': str(24 * 60 * 60 * 1000),  # 1 day segments
                    'compression.type': 'snappy',
                    'min.insync.replicas': '1',
                },
                'description': 'OHLCV bar data (1m, 5m, 15m, 1h, 1d) aggregated from ticks'
            },
            {
                'name': 'vn-market-indices',
                'partitions': 3,
                'replication_factor': 1,
                'config': {
                    'cleanup.policy': 'delete',
                    'retention.ms': str(30 * 24 * 60 * 60 * 1000),  # 30 days
                    'segment.ms': str(24 * 60 * 60 * 1000),
                    'compression.type': 'snappy',
                },
                'description': 'Vietnamese market indices (VN-Index, VN30, HNX-Index, UPCOM-Index)'
            },
            {
                'name': 'vn-trading-signals',
                'partitions': 6,
                'replication_factor': 1,
                'config': {
                    'cleanup.policy': 'delete',
                    'retention.ms': str(7 * 24 * 60 * 60 * 1000),  # 7 days
                    'segment.ms': str(24 * 60 * 60 * 1000),
                    'compression.type': 'snappy',
                },
                'description': 'Trading signals generated by algorithmic strategies'
            },
            {
                'name': 'vn-risk-events',
                'partitions': 3,
                'replication_factor': 1,
                'config': {
                    'cleanup.policy': 'delete',
                    'retention.ms': str(30 * 24 * 60 * 60 * 1000),  # 30 days
                    'segment.ms': str(24 * 60 * 60 * 1000),
                    'compression.type': 'snappy',
                },
                'description': 'Risk management events, alerts, and portfolio monitoring'
            },
            {
                'name': 'vn-portfolio-updates',
                'partitions': 3,
                'replication_factor': 1,
                'config': {
                    'cleanup.policy': 'compact',  # Keep latest portfolio state
                    'segment.ms': str(6 * 60 * 60 * 1000),  # 6 hour segments
                    'compression.type': 'snappy',
                },
                'description': 'Portfolio position updates and P&L calculations'
            },
            {
                'name': 'vn-order-execution',
                'partitions': 6,
                'replication_factor': 1,
                'config': {
                    'cleanup.policy': 'delete',
                    'retention.ms': str(90 * 24 * 60 * 60 * 1000),  # 90 days for audit
                    'segment.ms': str(24 * 60 * 60 * 1000),
                    'compression.type': 'snappy',
                },
                'description': 'Order placement, execution, and trade confirmations'
            },
            {
                'name': 'vn-market-news',
                'partitions': 2,
                'replication_factor': 1,
                'config': {
                    'cleanup.policy': 'delete',
                    'retention.ms': str(7 * 24 * 60 * 60 * 1000),  # 7 days
                    'segment.ms': str(24 * 60 * 60 * 1000),
                    'compression.type': 'snappy',
                },
                'description': 'Market news and events affecting Vietnamese stocks'
            },
            {
                'name': 'vn-system-metrics',
                'partitions': 2,
                'replication_factor': 1,
                'config': {
                    'cleanup.policy': 'delete',
                    'retention.ms': str(3 * 24 * 60 * 60 * 1000),  # 3 days
                    'segment.ms': str(6 * 60 * 60 * 1000),  # 6 hour segments
                    'compression.type': 'snappy',
                },
                'description': 'System health metrics, performance data, and monitoring'
            }
        ]
        
        created_topics = []
        failed_topics = []
        
        for topic_config in topics_config:
            try:
                topic = NewTopic(
                    name=topic_config['name'],
                    num_partitions=topic_config['partitions'],
                    replication_factor=topic_config['replication_factor'],
                    topic_configs=topic_config['config']
                )
                
                result = self.admin_client.create_topics([topic], validate_only=False)
                
                # Wait for creation to complete
                for topic_name, future in result.items():
                    try:
                        future.result(timeout=10)
                        created_topics.append(topic_name)
                        print(f"✅ Created topic: {topic_name} ({topic_config['partitions']} partitions)")
                        print(f"   Description: {topic_config['description']}")
                    except TopicAlreadyExistsError:
                        print(f"ℹ️  Topic already exists: {topic_name}")
                    except Exception as e:
                        failed_topics.append((topic_name, str(e)))
                        print(f"❌ Failed to create topic {topic_name}: {e}")
                        
            except Exception as e:
                failed_topics.append((topic_config['name'], str(e)))
                print(f"❌ Error creating topic {topic_config['name']}: {e}")
        
        if failed_topics:
            print(f"\n❌ Failed to create {len(failed_topics)} topics")
            for topic_name, error in failed_topics:
                print(f"   - {topic_name}: {error}")
            return False
        
        print(f"\n✅ Successfully created {len(created_topics)} topics for Vietnamese market")
        return True
    
    def list_topics(self) -> bool:
        """List all topics in the cluster."""
        print("\n📋 Listing all Kafka topics...")
        
        try:
            metadata = self.admin_client.list_topics(timeout=10)
            topics = list(metadata.topics.keys())
            
            if not topics:
                print("ℹ️  No topics found in the cluster")
                return True
            
            # Group topics by prefix
            vn_topics = [t for t in topics if t.startswith('vn-')]
            system_topics = [t for t in topics if t.startswith('_')]
            other_topics = [t for t in topics if not t.startswith('vn-') and not t.startswith('_')]
            
            if vn_topics:
                print(f"\n🇻🇳 Vietnamese Market Topics ({len(vn_topics)}):")
                for topic in sorted(vn_topics):
                    print(f"   - {topic}")
            
            if other_topics:
                print(f"\n📊 Other Topics ({len(other_topics)}):")
                for topic in sorted(other_topics):
                    print(f"   - {topic}")
            
            if system_topics:
                print(f"\n⚙️  System Topics ({len(system_topics)}):")
                for topic in sorted(system_topics):
                    print(f"   - {topic}")
            
            print(f"\nTotal topics: {len(topics)}")
            return True
            
        except Exception as e:
            print(f"❌ Failed to list topics: {e}")
            return False
    
    def verify_topic_configs(self) -> bool:
        """Verify topic configurations."""
        print("\n🔍 Verifying topic configurations...")
        
        try:
            # Get list of Vietnamese market topics
            metadata = self.admin_client.list_topics(timeout=10)
            vn_topics = [t for t in metadata.topics.keys() if t.startswith('vn-')]
            
            if not vn_topics:
                print("⚠️  No Vietnamese market topics found")
                return False
            
            # Check configurations for each topic
            configs_to_check = [ConfigResource(ConfigResourceType.TOPIC, topic) for topic in vn_topics]
            configs = self.admin_client.describe_configs(configs_to_check)
            
            print(f"Configuration summary for {len(vn_topics)} topics:")
            
            for topic in sorted(vn_topics):
                config_resource = ConfigResource(ConfigResourceType.TOPIC, topic)
                if config_resource in configs:
                    topic_config = configs[config_resource].result()
                    
                    # Extract key configurations
                    retention_ms = topic_config.get('retention.ms', {}).value
                    compression = topic_config.get('compression.type', {}).value
                    cleanup_policy = topic_config.get('cleanup.policy', {}).value
                    
                    retention_days = int(retention_ms) / (24 * 60 * 60 * 1000) if retention_ms else 'N/A'
                    
                    print(f"   {topic}:")
                    print(f"     Retention: {retention_days} days, Compression: {compression}, Policy: {cleanup_policy}")
            
            return True
            
        except Exception as e:
            print(f"❌ Failed to verify topic configs: {e}")
            return False


def main():
    """Main setup function."""
    print("Vietnamese Algorithmic Trading System - Kafka Topics Setup")
    print("=" * 65)
    
    # Wait for Kafka to be ready
    print("⏳ Waiting for Kafka to be ready...")
    time.sleep(5)
    
    # Initialize topic manager
    topic_manager = KafkaTopicManager(['localhost:9092'])
    
    # Connect to Kafka
    if not topic_manager.connect():
        print("❌ Cannot connect to Kafka. Make sure it's running:")
        print("💡 docker-compose -f docker-compose.kafka.yml up -d")
        return False
    
    # Create topics
    if not topic_manager.create_vietnamese_market_topics():
        print("❌ Failed to create some topics")
        return False
    
    # List all topics
    topic_manager.list_topics()
    
    # Verify configurations
    topic_manager.verify_topic_configs()
    
    print("\n" + "=" * 65)
    print("✅ Kafka Topics Setup Complete!")
    print("=" * 65)
    
    print("\nTopics created for Vietnamese algorithmic trading:")
    print("📈 Market data ingestion and processing")
    print("🤖 Trading signal generation and execution")
    print("⚠️  Risk management and monitoring")
    print("📊 Portfolio tracking and reporting")
    print("📰 News and market events")
    print("🔧 System metrics and health monitoring")
    
    print("\nNext steps:")
    print("1. Access Kafka UI at http://localhost:8080")
    print("2. Run: python scripts/final_kafka_demo.py")
    print("3. Start data ingestion pipeline")
    
    return True


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)