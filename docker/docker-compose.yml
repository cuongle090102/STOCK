version: '3.8'

services:
  # Apache Kafka Cluster
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    container_name: vn-algo-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - vn-algo-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    hostname: kafka
    container_name: vn-algo-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:29092
      KAFKA_CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      KAFKA_CONFLUENT_METRICS_ENABLE: 'true'
      KAFKA_CONFLUENT_SUPPORT_CUSTOMER_ID: anonymous
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - vn-algo-network
    healthcheck:
      test: kafka-broker-api-versions --bootstrap-server kafka:29092
      interval: 10s
      timeout: 5s
      retries: 5

  # Schema Registry
  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.0
    hostname: schema-registry
    container_name: vn-algo-schema-registry
    depends_on:
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks:
      - vn-algo-network

  # MinIO (S3-compatible storage)
  minio:
    image: minio/minio:RELEASE.2024-01-16T16-07-38Z
    hostname: minio
    container_name: vn-algo-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-minioadmin123}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - vn-algo-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # PostgreSQL (for Airflow and application metadata)
  postgres:
    image: postgres:15.5
    hostname: postgres
    container_name: vn-algo-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: vnalgo
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-vnalgo123}
      POSTGRES_DB: vnalgo
      POSTGRES_MULTIPLE_DATABASES: airflow,superset,trading
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh:ro
    networks:
      - vn-algo-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vnalgo"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis (for caching and Celery)
  redis:
    image: redis:7.2-alpine
    hostname: redis
    container_name: vn-algo-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass redis123
    volumes:
      - redis_data:/data
    networks:
      - vn-algo-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Apache Airflow Webserver
  airflow-webserver:
    build:
      context: .
      dockerfile: airflow/Dockerfile
    hostname: airflow-webserver
    container_name: vn-algo-airflow-webserver
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://vnalgo:vnalgo123@postgres/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://vnalgo:vnalgo123@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:redis123@redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY:-'Zv5K1zKFwLdJ9XzMl4N2Bq8R7tGhYfEa3sD6uP0wE='}
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
      _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
    volumes:
      - ../dags:/opt/airflow/dags
      - ../logs:/opt/airflow/logs
      - ../plugins:/opt/airflow/plugins
      - ../data:/opt/airflow/data
    ports:
      - "8080:8080"
    command: webserver
    networks:
      - vn-algo-network
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Apache Airflow Scheduler
  airflow-scheduler:
    build:
      context: .
      dockerfile: airflow/Dockerfile
    hostname: airflow-scheduler
    container_name: vn-algo-airflow-scheduler
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://vnalgo:vnalgo123@postgres/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://vnalgo:vnalgo123@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:redis123@redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY:-'Zv5K1zKFwLdJ9XzMl4N2Bq8R7tGhYfEa3sD6uP0wE='}
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    volumes:
      - ../dags:/opt/airflow/dags
      - ../logs:/opt/airflow/logs
      - ../plugins:/opt/airflow/plugins
      - ../data:/opt/airflow/data
    command: scheduler
    networks:
      - vn-algo-network
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Apache Superset
  superset:
    build:
      context: .
      dockerfile: superset/Dockerfile
    hostname: superset
    container_name: vn-algo-superset
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8088:8088"
    environment:
      SUPERSET_CONFIG_PATH: /app/superset_config.py
      SUPERSET_SECRET_KEY: ${SUPERSET_SECRET_KEY:-'change-this-to-a-very-secure-random-key-in-production'}
      DATABASE_URL: postgresql+psycopg2://vnalgo:vnalgo123@postgres/superset
      REDIS_URL: redis://:redis123@redis:6379/1
    volumes:
      - superset_home:/app/superset_home
      - ./superset/superset_config.py:/app/superset_config.py:ro
      - ./superset/docker-init.sh:/app/docker-init.sh:ro
    networks:
      - vn-algo-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana (Monitoring Dashboard)
  grafana:
    image: grafana/grafana:10.2.0
    hostname: grafana
    container_name: vn-algo-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
      GF_INSTALL_PLUGINS: grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - vn-algo-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus (Metrics Collection)
  prometheus:
    image: prom/prometheus:v2.47.0
    hostname: prometheus
    container_name: vn-algo-prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - vn-algo-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Jupyter Lab (Development and Analysis)
  jupyter:
    build:
      context: .
      dockerfile: jupyter/Dockerfile
    hostname: jupyter
    container_name: vn-algo-jupyter
    ports:
      - "8888:8888"
    environment:
      JUPYTER_ENABLE_LAB: "yes"
      JUPYTER_TOKEN: "vnalgo123"
    volumes:
      - ../notebooks:/home/jovyan/notebooks
      - ../data:/home/jovyan/data
      - ../src:/home/jovyan/src
    networks:
      - vn-algo-network
    command: start-notebook.sh --NotebookApp.token='vnalgo123' --NotebookApp.password=''

  # Trading Application
  trading-app:
    build:
      context: ..
      dockerfile: docker/trading/Dockerfile
    hostname: trading-app
    container_name: vn-algo-trading-app
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8000:8000"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      DATABASE_URL: postgresql+psycopg2://vnalgo:vnalgo123@postgres/trading
      REDIS_URL: redis://:redis123@redis:6379/2
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-minioadmin123}
    volumes:
      - ../src:/app/src
      - ../configs:/app/configs
      - ../data:/app/data
    networks:
      - vn-algo-network
    command: ["python", "-m", "src.api.main"]

volumes:
  zookeeper_data:
  zookeeper_logs:
  kafka_data:
  minio_data:
  postgres_data:
  redis_data:
  superset_home:
  grafana_data:
  prometheus_data:

networks:
  vn-algo-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16